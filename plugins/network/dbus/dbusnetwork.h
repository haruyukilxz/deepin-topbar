/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DBusNetwork -p dbusnetwork com.deepin.daemon.Network.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSNETWORK_H_1469068798
#define DBUSNETWORK_H_1469068798

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.daemon.Network
 */
class DBusNetwork: public QDBusAbstractInterface
{
    Q_OBJECT

    Q_SLOT void __propertyChanged__(const QDBusMessage& msg)
    {
        QList<QVariant> arguments = msg.arguments();
        if (3 != arguments.count())
            return;
        QString interfaceName = msg.arguments().at(0).toString();
        if (interfaceName !="com.deepin.daemon.Network")
            return;
        QVariantMap changedProps = qdbus_cast<QVariantMap>(arguments.at(1).value<QDBusArgument>());
        foreach(const QString &prop, changedProps.keys()) {
        const QMetaObject* self = metaObject();
            for (int i=self->propertyOffset(); i < self->propertyCount(); ++i) {
                QMetaProperty p = self->property(i);
                if (p.name() == prop) {
 	            Q_EMIT p.notifySignal().invoke(this);
                }
            }
        }
   }
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.Network"; }

public:
    explicit DBusNetwork(QObject *parent = 0);

    ~DBusNetwork();

    Q_PROPERTY(QString ActiveConnections READ activeConnections NOTIFY ActiveConnectionsChanged)
    inline QString activeConnections() const
    { return qvariant_cast< QString >(property("ActiveConnections")); }

    Q_PROPERTY(QString Connections READ connections NOTIFY ConnectionsChanged)
    inline QString connections() const
    { return qvariant_cast< QString >(property("Connections")); }

    Q_PROPERTY(QString Devices READ devices NOTIFY DevicesChanged)
    inline QString devices() const
    { return qvariant_cast< QString >(property("Devices")); }

    Q_PROPERTY(bool NetworkingEnabled READ networkingEnabled WRITE setNetworkingEnabled NOTIFY NetworkingEnabledChanged)
    inline bool networkingEnabled() const
    { return qvariant_cast< bool >(property("NetworkingEnabled")); }
    inline void setNetworkingEnabled(bool value)
    { setProperty("NetworkingEnabled", QVariant::fromValue(value)); }

    Q_PROPERTY(uint State READ state NOTIFY StateChanged)
    inline uint state() const
    { return qvariant_cast< uint >(property("State")); }

    Q_PROPERTY(bool VpnEnabled READ vpnEnabled WRITE setVpnEnabled NOTIFY VpnEnabledChanged)
    inline bool vpnEnabled() const
    { return qvariant_cast< bool >(property("VpnEnabled")); }
    inline void setVpnEnabled(bool value)
    { setProperty("VpnEnabled", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusObjectPath> ActivateAccessPoint(const QString &in0, const QDBusObjectPath &in1, const QDBusObjectPath &in2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2);
        return asyncCallWithArgumentList(QStringLiteral("ActivateAccessPoint"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> ActivateConnection(const QString &in0, const QDBusObjectPath &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("ActivateConnection"), argumentList);
    }

    inline QDBusPendingReply<> CancelSecret(const QString &in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("CancelSecret"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> CreateConnection(const QString &in0, const QDBusObjectPath &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("CreateConnection"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> CreateConnectionForAccessPoint(const QDBusObjectPath &in0, const QDBusObjectPath &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("CreateConnectionForAccessPoint"), argumentList);
    }

    inline QDBusPendingReply<> DeactivateConnection(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("DeactivateConnection"), argumentList);
    }

    inline QDBusPendingReply<> DeleteConnection(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("DeleteConnection"), argumentList);
    }

    inline QDBusPendingReply<> DisconnectDevice(const QDBusObjectPath &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("DisconnectDevice"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> EditConnection(const QString &in0, const QDBusObjectPath &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("EditConnection"), argumentList);
    }

    inline QDBusPendingReply<> EnableDevice(const QDBusObjectPath &devPath, bool enable)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(devPath) << QVariant::fromValue(enable);
        return asyncCallWithArgumentList(QStringLiteral("EnableDevice"), argumentList);
    }

    inline QDBusPendingReply<> FeedSecret(const QString &in0, const QString &in1, const QString &in2, bool in3)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2) << QVariant::fromValue(in3);
        return asyncCallWithArgumentList(QStringLiteral("FeedSecret"), argumentList);
    }

    inline QDBusPendingReply<QString> GetAccessPoints(const QDBusObjectPath &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("GetAccessPoints"), argumentList);
    }

    inline QDBusPendingReply<QString> GetActiveConnectionInfo()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetActiveConnectionInfo"), argumentList);
    }

    inline QDBusPendingReply<QString> GetAutoProxy()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetAutoProxy"), argumentList);
    }

    inline QDBusPendingReply<QString, QString> GetProxy(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("GetProxy"), argumentList);
    }
    inline QDBusReply<QString> GetProxy(const QString &in0, QString &out1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetProxy"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            out1 = qdbus_cast<QString>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<QString> GetProxyIgnoreHosts()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetProxyIgnoreHosts"), argumentList);
    }

    inline QDBusPendingReply<QString> GetProxyMethod()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetProxyMethod"), argumentList);
    }

    inline QDBusPendingReply<QStringList> GetSupportedConnectionTypes()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetSupportedConnectionTypes"), argumentList);
    }

    inline QDBusPendingReply<QString> GetWiredConnectionUuid(const QDBusObjectPath &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("GetWiredConnectionUuid"), argumentList);
    }

    inline QDBusPendingReply<bool> IsDeviceEnabled(const QDBusObjectPath &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("IsDeviceEnabled"), argumentList);
    }

    inline QDBusPendingReply<> SetAutoProxy(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetAutoProxy"), argumentList);
    }

    inline QDBusPendingReply<> SetProxy(const QString &in0, const QString &in1, const QString &in2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2);
        return asyncCallWithArgumentList(QStringLiteral("SetProxy"), argumentList);
    }

    inline QDBusPendingReply<> SetProxyIgnoreHosts(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetProxyIgnoreHosts"), argumentList);
    }

    inline QDBusPendingReply<> SetProxyMethod(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetProxyMethod"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void AccessPointAdded(const QString &in0, const QString &in1);
    void AccessPointPropertiesChanged(const QString &in0, const QString &in1);
    void AccessPointRemoved(const QString &in0, const QString &in1);
    void DeviceEnabled(const QString &in0, bool in1);
    void NeedSecrets(const QString &in0);
    void NeedSecretsFinished(const QString &in0, const QString &in1);
// begin property changed signals
void ActiveConnectionsChanged();
void ConnectionsChanged();
void DevicesChanged();
void NetworkingEnabledChanged();
void StateChanged();
void VpnEnabledChanged();
};

namespace com {
  namespace deepin {
    namespace daemon {
      typedef ::DBusNetwork Network;
    }
  }
}
#endif
